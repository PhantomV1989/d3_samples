<!DOCTYPE html>
<svg width="960" height="500"></svg>
<script src="./lib/d3.v4.min.js"></script>
<script>
var globalCount = 4;

function randInt(min, max) {
    return Math.round(Math.random() * (max - min) + min);
}

function popLinksWithNode(node, links) {
    while (links.find(x => x.source == node | x.target == node)) {
        let result = links.find(x => x.source == node | x.target == node);
        links.splice(links.indexOf(result), 1);
    }
    return links;
}

function addRandomNode(nodes, links, maxLinkCount) {
    let newNode = {
        id: globalCount
    }
    nodes.push(newNode);
    let linkCount = randInt(1, maxLinkCount);
    for (i = 0; i < linkCount; i++) {
        links.push({
            source: nodes[randInt(0, nodes.length - 1)],
            target: newNode
        });
    }
    globalCount += 1;
    return nodes, links;
}

function removeRandomNode(nodes, links) {
    let rng = randInt(0, nodes.length - 1);
    let selectedNode = nodes[rng];
    links = popLinksWithNode(selectedNode, links);
    nodes.splice(rng, 1);
    return nodes, links;
}

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    color = d3.scaleOrdinal(d3.schemeCategory10);

var nodes = [{
        id: 0
    }, {
        id: 1
    }, {
        id: 2
    }],
    links = [{
        source: nodes[0],
        target: nodes[1]
    }, {
        source: nodes[1],
        target: nodes[2]
    }, {
        source: nodes[2],
        target: nodes[0]
    }];

var simulation = d3.forceSimulation(nodes)
    .force("charge", d3.forceManyBody().strength(-200))
    .force("link", d3.forceLink(links).distance(100))
    .force("x", d3.forceX())
    .force("y", d3.forceY())
    .alphaTarget(1)
    .on("tick", ticked);

var g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")"),
    link = g.append("g").attr("stroke", "#000").attr("stroke-width", 1.5).selectAll(".link"),
    node = g.append("g").attr("stroke", "#fff").attr("stroke-width", 1.5).selectAll(".node");

restart();

d3.interval(function() {
    nodes, links = addRandomNode(nodes, links, 2);
    if (nodes.length > 30) {
        nodes, links = removeRandomNode(nodes, links);
    }
    restart();
}, 300, d3.now());

function restart() {

    // Apply the general update pattern to the nodes.
    node = node.data(nodes, function(d) {
        return d.id;
    });

    node.exit().transition()
        .attr("r", 0)
        .remove();

    node = node.enter().append("circle")
        .attr("fill", function(d) {
            return color(d.id);
        })
        .call(function(node) {
            node.transition().attr("r", 8);
        })
        .merge(node);

    // Apply the general update pattern to the links.
    link = link.data(links, function(d) {
        return d.source.id + "-" + d.target.id;
    });

    // Keep the exiting links connected to the moving remaining nodes.
    link.exit().transition()
        .attr("stroke-opacity", 0)
        .attrTween("x1", function(d) {
            return function() {
                return d.source.x;
            };
        })
        .attrTween("x2", function(d) {
            return function() {
                return d.target.x;
            };
        })
        .attrTween("y1", function(d) {
            return function() {
                return d.source.y;
            };
        })
        .attrTween("y2", function(d) {
            return function() {
                return d.target.y;
            };
        })
        .remove();

    link = link.enter().append("line")
        .call(function(link) {
            link.transition().attr("stroke-opacity", 1);
        })
        .merge(link);

    // Update and restart the simulation.
    simulation.nodes(nodes);
    simulation.force("link").links(links);
    simulation.alpha(1).restart();
}

function ticked() {
    node.attr("cx", function(d) {
            return d.x;
        })
        .attr("cy", function(d) {
            return d.y;
        })

    link.attr("x1", function(d) {
            return d.source.x;
        })
        .attr("y1", function(d) {
            return d.source.y;
        })
        .attr("x2", function(d) {
            return d.target.x;
        })
        .attr("y2", function(d) {
            return d.target.y;
        });
}
</script>
