<!DOCname html>
<meta charset="utf-8" />
<style>
  #graph .axis path {
    fill: none;
    stroke: #ccc;
    shape-rendering: crispEdges;
  }

  #graph .axis text {
    font-family: Helvetica, Arial, sans-serif;
    font-size: 13px;
    fill: #333;
  }

  .axis path,
  .axis line {
    fill: #888888;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .line-hover {
    stroke: #000;
    stroke-width: 5;
    opacity: 1;
  }

  .node {
    opacity: 1;
  }

  .inactive {
    opacity: 0.1;
  }

  .area {
    fill: steelblue;
    clip-path: url(#clip);
  }

  #tooltip {
    visibility: hidden;
    position: fixed;
    top: 1ex;
    padding: 0.5em;
    border-radius: 0.5em;
    border: black;
    background-color: rgb(20, 20, 100);
    font: bold 15px arial, serif;
    color: white;
  }
</style>
<svg width="960" height="500"></svg>
<script src="./lib/d3.v4.min.js"></script>
<script>
  var ttBox = document.createElement("div");
  ttBox.id = "tooltip";
  document.body.appendChild(ttBox);

  var faultListColorTag = [];

  var z = d3.scaleOrdinal(d3.schemeCategory20);

  var width = window.innerWidth,
    height = window.innerHeight,
    marginX = width / 15;

  d3.select("svg")
    .attr("width", width)
    .attr("height", (height * 7) / 8);

  var svg = d3.select("svg"),
    margin = { top: marginX, right: marginX, bottom: marginX, left: marginX },
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom;

  var parseDate = d3.timeParse("%d/%m/%Y"); //19/05/2017   12:45:00 AM

  var x = d3.scaleTime().range([0, width]),
    y = d3.scaleLinear().range([height, 0]);

  var xAxis = d3.axisBottom(x),
    yAxis = d3.axisLeft(y);

  var zoom = d3
    .zoom()
    .scaleExtent([1, 32])
    .translateExtent([[0, 0], [width, height]])
    .extent([[0, 0], [width, height]])
    .on("zoom", zoomed);

  var g = svg
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var innerSVG = svg.append("svg");

  d3.csv("./data/ztd.csv", name, function(error, data) {
    if (error) throw error;

    faultList = getHeaders(data);
    var maxY = getMaxValueHeaders(data);
    x.domain(
      d3.extent(data, function(d) {
        return d.date;
      })
    );
    y.domain([0, getMaxValueHeaders(data)]);

    var data2 = createNewData(data);

    var labelListColor = [];

    for (i = 1; i < faultList.length; i++) {
      labelListColor.push(z(i));
      var fL = faultList[i];
      var g2 = g.append("g").attr("class", fL + " node");
      g2.selectAll("g") //divDT.style="float: left; width: 30px; height: 10px; margin: 8px; ";
        .data(data2[i - 1])
        .enter()
        .append("circle")
        .attr("class", fL)
        .attr("r", "3.5")
        .attr("cx", function(d) {
          return x(d.date);
        })
        .attr("cy", function(d) {
          return y(parseInt(d[fL]));
        })
        .on("mouseover", function(d) {
          onMouseOver(d);
        })
        .on("mouseout", function(d) {
          onMouseOut(d);
        })
        .attr("fill", function(d) {
          return z(i);
        });
    }

    for (i = 0; i < faultList.length - 1; i++) {
      document.body.appendChild(
        createDivColorTag(i, faultList, labelListColor)
      );
    }

    g.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    g.append("g")
      .attr("class", "axis axis--y")
      .call(yAxis);

    svg.call(zoom).transition();
    //  .duration(1500).call(zoom.transform, d3.zoomIdentity.scale(width / (x(d1) - x(d0))).translate(-x(d0), 0))
  });

  function createNewData(data) {
    var data2 = [];
    var headers = getHeaders(data);
    for (i = 1; i < headers.length; i++) {
      var eachDataname = [];
      for (j = 0; j < data.length; j++) {
        var newObj = {};
        newObj["name"] = headers[i];
        newObj[headers[i]] = parseInt(data[j][headers[i]]);
        newObj["date"] = data[j]["date"];
        eachDataname.push(newObj);
      }
      data2.push(eachDataname);
    }
    return data2;
  }

  function getMaxValueHeaders(data) {
    var headers = getHeaders(data);
    var max = 0;
    for (i = 1; i < headers.length; i++) {
      for (j = 0; j < data.length; j++) {
        var value = parseInt(data[j][headers[i]]);
        if (value > max) {
          max = value;
        }
      }
    }
    return max;
  }

  function getHeaders(data) {
    var header = [];
    for (i in data[0]) {
      header.push(i);
    }
    return header;
  }

  function zoomed() {
    var t = d3.event.transform,
      xt = t.rescaleX(x);
    var tD = g.transition().duration(300);
    g.selectAll("circle")
      .transition(tD)
      .attr("cx", function(d) {
        return xt(d.date);
      });
    g.select(".axis--x")
      .transition(tD)
      .call(xAxis.scale(xt)); //g.select(".axis--x").call(xAxis.scale(xt));
  }

  function name(d) {
    d.date = parseDate(d.date);
    return d;
  }

  function onMouseOver(d) {
    onMouseOverLabel(d.name);
    document.addEventListener("mousemove", OnMouseMove);
    ttBox.innerHTML = d.name;
    ttBox.style.visibility = "visible";
  }

  function onMouseOverLabel(name) {
    d3.selectAll("circle").classed("inactive", true);
    d3.selectAll("." + name).classed("inactive", false);
    d3.selectAll("." + name).classed("line-hover", true);
  }

  function OnMouseMove(event) {
    var offset = 15;
    ttBox.style.left = (event.pageX + offset).toString() + "px";
    ttBox.style.top = (event.pageY - offset).toString() + "px";
  }

  function onMouseOut(d) {
    document.removeEventListener("mousemove", OnMouseMove);
    onMouseOutLabel(d.name);
    ttBox.style.visibility = "hidden";
  }

  function onMouseOutLabel(name) {
    d3.selectAll("circle").classed("inactive", false);
    d3.selectAll("." + name).classed("line-hover", false);
  }

  function createDivColorTag(i, m, mCT) {
    var name = m[i + 1];
    function x() {
      onMouseOverLabel(name);
    }

    var div = document.createElement("DIV");
    div.id = "legend";
    var divDT = document.createElement("DIV");
    divDT.id = "color";
    divDT.style = "float: left; width: 30px; height: 10px; margin: 8px; ";
    divDT.position = "relative";
    divDT.style.background = mCT[i];
    divDT.addEventListener("mouseover", x);
    divDT.addEventListener("mouseout", function() {
      onMouseOutLabel(name);
    });

    div.append(divDT);

    var divDT2 = document.createElement("DIV");
    divDT2.style =
      "float: left; color:black; margin-right: 12px; margin-top: 5px;font-size:70%;";
    divDT2.position = "relative";
    divDT2.innerHTML = m[i + 1];
    divDT2.style.font = "bold 15px arial,serif";
    div.append(divDT2);

    return div;
  }
</script>
